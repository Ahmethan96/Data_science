This function should add the two values if the value of the "kind" parameter is "add" or is not passed in, otherwise it should subtract the second value from the first. 

Can you fix the function so that it works?


def do_math(a, b, kind = None):
  if (kind=='add'):
    return a+b
  else:
    return a-b

do_math(1, 2, "add")
##############################################

What would be an appropriate slice to get the name "Christopher" from the string "Dr. Christopher Brooks"?

x = 'Dr. Christopher Brooks'

print(x[3:15])
##############################################

sales_record = {"price": 3.24,
                "num_item": 4,
                "person": "ibo"}

sales_statement = " {} bought {} items(s) at a price of {} each for a total of {}"
# print(sales_statement)
# print(sales_record)

print(sales_statement.format(sales_record["person"],
                            sales_record["num_item"],
                            sales_record["price"],
                            sales_record["num_item"] * sales_record["price"]))
results:
ibo bought 4 items(s) at a price of 3.24 each for a total of 12.96
##############################################                            

            *** map function ***
map() function returns a map object(which is an iterator) 
of the results after applying the given function to each item of a given iterable (list, tuple etc.) Syntax :
map(fun, iter)
////////////////////////////////////////////////////
basic metohd to map a function 

def addtion(n, m):
    return n+m

lis = [(1, 2), (3, 4), (5, 6)]

print([addtion(n, m) for n,m in lis])

def addtion_2(w):
    return w + w

lis_2 = [1, 2, 3, 4, 5]

print([addtion_2(w) for w in lis_2])

results: 
[3, 7, 11]
[2, 4, 6, 8, 10]

////////////////////////////////////////////////////
store1 = [10, 11, 12, 3]
store2 = [9, 10, 2, 14]
cheapest = map(min, store1, store2)
expensive = map(max, store1, store2)
print(type(cheapest))
print(list(cheapest))
print(list(expensive))

resutls:
<class 'map'>
[9, 10, 2, 3]
[10, 11, 12, 14]
//////////////////////////////////////////////////
def even_or_odd(num):
    if num%2 == 0:
        return "The number {} is Even".format(num)
    else:
        return "The number {} is Odd".format(num)

print(even_or_odd(5))

list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 25, 30]

print(list(map(even_or_odd, list1))) ===(both will give same result)=== print([even_or_odd(num) for num in list1]) 

results:
['The number 1 is Odd', 'The number 2 is Even', 'The number 3 is Odd', 'The number 4 is Even', 'The number 5 is Odd', 
'The number 6 is Even', 'The number 7 is Odd', 'The number 8 is Even', 'The number 9 is Odd', 'The number 10 is Even', 
'The number 20 is Even', 'The number 25 is Odd', 'The number 30 is Even']
//////////////////////////////////////////////////
def add_sub(a,b):
    add = a + b
    sub = a - b
    return "the addition is {} and subtraction is {}".format(a,b)

print(add_sub(5,3))
print(list(map(add_sub, [5],[3])))

results
the addition is 5 and subtraction is 3
['the addition is 5 and subtraction is 3']

##############################################

Here is a list of faculty teaching this MOOC. Can you write a function and apply it using map() to get a list of all faculty titles and last names 
(e.g. ['Dr. Brooks', 'Dr. Collins-Thompson', â€¦]) ?

people = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 'Dr. Daniel Romero']

def split_title_and_name(person):
    title = person.split()[0]
    lastname = person.split()[-1]
    return '{} {}'.format(title, lastname)

list(map(split_title_and_name, people))



##############################################
enumerate function

fruits = ['apple', 'banana', 'cherry']

for index, value in enumerate(fruits):
    print(f"At index {index}: {value}")
    
results:
At index 0: apple
At index 1: banana
At index 2: cherry

##############################################
lambda function 

def func1(x):
    return x + 5

func2 = lambda x: x + 5

print(func1(5))
print(func2(5))

results: 
10
10




##############################################
List Comprehensions

def times_tables():
    lst = []
    for i in range(10):
        for j in range (10):
            lst.append(i*j)
    return lst

times_tables() == [j*i for i in range(10) for j in range(10)]


//////////////////////////////////////////////////
my_list = []
for number in range (0, 1000):
     if number % 2 == 0:
         my_list.append(number)
print(my_list)


my_list_2 = [number for number in range (0, 1000) if number % 2 == 0]
print(my_list_2)












