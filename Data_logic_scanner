from openpyxl import Workbook, load_workbook
wb = load_workbook('oem.xlsx')
ws = wb.active

import tkinter as tk

def on_button_click():
    user_input = entry.get()
    label.config(text=f"Hello, {user_input}!")

# Create the main window
window = tk.Tk()
window.title("Simple UI")

# Create an entry widget for user input

# Create a button
button_yes = tk.Button(window, text="Yes", command=on_button_click)
button_yes.pack(pady=10)

button_no = tk.Button(window, text="No", command= on_button_click)
button_no.pack(pady=15)

# Create a label
label = tk.Label(window, text="Enter your name:")
label.pack(pady=10)

entry = tk.Entry(window, width=30)
entry.pack(pady=10)

# Run the main loop
window.mainloop()


////////////////////////////////////////////////////////////////////////////////////
last update 28.11.2023
///////////////////////////////////////////////////////////////////////////////////
from openpyxl import Workbook, load_workbook
import tkinter as tk

wb = load_workbook('oem.xlsx')
ws = wb.active

def find_serial_number(user_input):
    for row in ws.iter_rows(min_row=2, values_only=True):  # Assuming data starts from the second row
        if row[0] == user_input:
            return row[1]  # Assuming the serial number is in the second column
    return "Serial number not found"

def on_button_click():
    user_input = entry.get()
    serial_number = find_serial_number(float(user_input))
    label.config(text=f"The scanned product is: {serial_number}")
    return user_input

# Create the main window
window = tk.Tk()
window.title("Simple UI")

# Create button, label, and entry widgets
button_check = tk.Button(window, text="Check product", command=on_button_click)
button_check.pack(pady=15)

label = tk.Label(window, text="Scan product:")
label.pack(pady=10)

entry = tk.Entry(window, width=30)
entry.pack(pady=10)

# Run the main loop
window.mainloop()
//////////////////////////////////////////////////////////////////////////////////////////////////
last update 29.11.2023
//////////////////////////////////////////////////////////////////////////////////////////////////
from openpyxl import Workbook, load_workbook
import tkinter as tk

wb = load_workbook('oem.xlsx')
ws = wb.active

def find_serial_number(user_input):
    for row in ws.iter_rows(min_row=2, values_only=True):  # Assuming data starts from the second row
        if row[0] == user_input:
            return row[1]  # Assuming the serial number is in the second column
    return "Serial number not found"

def on_button_click():
    user_input = entry.get()
    serial_number = find_serial_number(float(user_input))
    label.config(text=f"The scanned product is: {serial_number}")

    ask_user_yes = tk.Button(window, text="confirm")
    ask_user_yes.pack(side=tk.TOP, pady=10, anchor='center')
    # ask_user_yes.pack(pady = 10)

    ask_user_no = tk.Button(window, text="Reject")
    ask_user_no.pack(side=tk.TOP, pady=10, anchor='center')



    return user_input

# Create the main window
window = tk.Tk()
window.title("Simple UI")

# Create button, label, and entry widgets
button_check = tk.Button(window, text="Check product", command=on_button_click)
button_check.pack(pady=15)

label = tk.Label(window, text="Scan product:")
label.pack(pady=10)

entry = tk.Entry(window, width=30)
entry.pack(pady=10)


# ask_user_no.pack(pady = 10)
# Run the main loop
window.mainloop()




//////////////////////////////////////////////////////////////////////////////////////////////////
Client code 04.12.2023
//////////////////////////////////////////////////////////////////////////////////////////////////

import socket

# Create a socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Set the IP address and port
ip_address = '192.168.3.101'
port = 1023

try:
    print('111')
    s.connect((ip_address, port))
    print('Connected to the device')

    # Message 1
    message1 = '\x1B[C\x1B[B\n'

    # Message 2
    message2 = "MATCH abc\nMATCH abcd\n"

    # Message 3
    message3 = "SAVE MATCH CODE\n\x1B[A\n"

    # Concatenate messages
    combined_messages = message1 + message2 + message3

    print("Sending messages:")
    print(combined_messages)

    # Send messages
    s.sendall(combined_messages.encode())
    print('Data sent successfully')

    # Optionally, you can receive data from the device if needed
    data = s.recv(10)
    print('Received', repr(data))

except Exception as e:
    print(f"Error: {e}")

finally:
    # Close the socket
    s.close()
    print("Socket closed")

print("done")

