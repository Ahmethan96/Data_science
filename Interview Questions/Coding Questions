## Coding Questions 
Question: Write a Python function to check if a given string is a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization.

Example:

Input: "racecar"
Output: True

Answer:
def is_plaindrom(txt):
    txt = str(txt).replace(" ", "").replace(",", "").replace(".","") # since str is immutable you must assgin back to txt
    return txt == txt[::-1]

word = "a man, a plan, a canal, panama."
print(is_plaindrom(word))
///////////////////////////////////////////////////////////////////////////////////

Question:
Create a Python class called BankAccount which represents a bank account, having the following functionalities:

1 - __init__ method that initializes a new BankAccount with a given balance (default to 0).
2 - deposit method to deposit a specified amount into the bank account.
3 - withdraw method to withdraw a specified amount from the bank account. If the withdrawal amount is greater than the current balance, print "Insufficient funds."
4 - get_balance method to return the current balance.

Answer:
class BankAccount():
    def __init__(self, balance):
        self.total = balance

    def deposite(self, amount_deposite):
        self.total += amount_deposite

    def withdraw(self, withdraw):
        if withdraw > self.total:
            print("Insufficint amount")
        else:
            self.total -= withdraw

    def get_balance(self):
        # self.get_balance = self.total
        # return self.get_balance ## Do not over write
        return self.total

acount1 = BankAccount(100)
acount1.deposite(500)
print(acount1.get_balance())
acount1.withdraw(1100)
print(acount1.get_balance())
///////////////////////////////////////////////////////////////////////////////////

Question:
Find the First Non-Repeating Character

Given a string, find the first character that does not repeat anywhere in the string. Implement a function:
def first_non_repeating_char(s: str) -> str:


Answer:
def first_non_repeating_char(s):
    # Create a dictionary to store the frequency of each character in the string.
    frequency = {}
    
    # Iterate through the string and update the frequency dictionary.
    for char in s:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1
    
    # Iterate through the string again and find the first non-repeating character.
    for char in s:
        if frequency[char] == 1:
            return char
    
    # Return an empty string if no non-repeating character is found.
    return ""

# Example usage:
s = "swiss"
print(first_non_repeating_char(s))  # Output: "w"
///////////////////////////////////////////////////////////////////////////////////

Question: Given a list of integers, write a Python function that returns the sum of all even numbers in the list minus the sum of all odd numbers. 
The function should be able to handle an empty list and should be implemented without using any loops.
input_list = [1, 2, 3, 4, 5]
output = your_function(input_list)
# Expected output: -3, because (2 + 4) - (1 + 3 + 5) = -3

Answer_1: 
def calculate_even_odd_difference(nums):
    even_sum = sum(num for num in nums if num % 2 == 0)
    odd_sum = sum(num for num in nums if num % 2 != 0)
    return even_sum - odd_sum

Answer_2:
def my_function(my_input):
    odd_list = [] 
    even_list = [] 
    for i in my_input:
        if i % 2 == 0:
            even_list.append(i)
        else: 
            odd_list.append(i)
    
    return ((sum(even_list)) - (sum(odd_list)))


print(my_function(input_list))

///////////////////////////////////////////////////////////////////////////////////

Question:
Given a list of numbers, write a Python function that returns a new list with all the duplicate numbers removed and maintains the original order of the numbers.

Example:
Input: [1, 2, 4, 2, 5, 3, 8, 3, 6]
Output: [1, 2, 4, 5, 3, 8, 6]

Answer_2:
def ibo(number):
    ibo_list = []
    for i in range(len(number)):
        if number[i] not in number[i+1:]:
            ibo_list.append(number[i])
    return ibo_list

ibosi = [1, 2, 4, 2, 5, 3, 8, 3, 6]
print(ibo(ibosi))

///////////////////////////////////////////////////////////////////////////////////

Question:
Write a Python function that takes a string as input and returns the reverse of the string. Do not use any built-in reverse functions or slicing.

Answer_1:
    def reverse_string(input_string):
    reversed_str = ""
    for char in input_string:
        reversed_str = char + reversed_str # nohtyP
    return reversed_str

///////////////////////////////////////////////////////////////////////////////////






